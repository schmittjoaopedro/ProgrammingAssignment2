dnorm(0.1)
dnorm(0.2)
dnorm(0.3)
dnorm(0.4)
dnorm(0.6)
dnorm(1)
dnorm(2)
dnorm(3)
dnorm(4)
dnorm(3.9)
dnorm(3.8)
dnorm(3)
dnorm(.1)
dnorm(o.1)
dnorm(0.1)
dnorm(1)
pnorm(1)
pnorm(-1)
.5 - pnorm(-1)
getwd()
source("function_class.R")
ls()
add2(2,2)
x
x[use]
above10 <- function (x) {
use <- x > 10
x[use]
}
aboce10(c(11,2,9,12))
above10(c(11,2,9,12))
columnmean <- function (y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
dir()
airquality = read.csv("hw1_data.csv")
columnmean(airquality)
columnmean <- function (y, removeNa = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNa)
}
means
}
columnmean(airquality)
lm()
lm
lm <- function (x) { x * x }
lm
search()
a=1
b=2
f<-function(x)
{
a*x + b
}
g<-function(x)
{
a=2
b=1
f(x)
}
g(2)
a
b
g<- function(x) {
a<-2
b<-1
a*x + b
}
g(2)
f<-function(x)
{
a*x + b
}
g<-function(x)
{
a=1
b=2
f<-function(x)
{
b*x + a
}
f(x)
}
g(2)
function (t) {
if(t > 10)
t <- 10
t
}
kk <- function (t) {
if(t > 10)
t <- 10
t
}
kk()
kk(11)
t
k = 8
kk()
t <- 8
kk()
t
kk
kk()
kk <- function () {
if(t > 10)
t <- 10
t
}
kk()
kk(2)
kk
kk()
t <- 12
kk()
t
kk()
t<- 8
kk()
y < 10
y <- 10
f <- function (x) {
y <- 2
y^2 + g(x)
}
g <- function (x) {}
g <- function (x) {
x*y
}
f(3)
make.NegLogLik <- function (data, fixed = c(FALSE,FALSE)) {
params <- fixed
function (p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
make.NegLogLik(1:5)
t <- make.NegLogLik(1:5)
p()
t()
t(1,1)
t(c(1,1))
t <- make.NegLogLik(1:5, c(2,2))
t(c(1,1))
t <- make.NegLogLik(1:5, c(,1))
t <- make.NegLogLik(1:5, c(1,1))
t(c(2,2))
fixed <- c(FALSE,FALSE)
fixed
params <- fixed
params
params[!fixed]
params[!fixed] <- c(1,1)
params
params <- fixed
params[fixed] <- c(1,1)
params
params <- c(1,1)
params
!c(1,1)
params(!c(1,1))
params
params[!c(1,1)]
params[!c(1,1)] <- c(2,2)
params
seq(1.7,1.9, len = 100)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins","twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
spin
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function (x) { x + 1 }, 6)
evaluate(function (x) { x[1] }, c(8, 4, 0))
evaluate(function (x) { x[length(x)] }, c(8, 4, 0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Olá","Sou","o","João")
submit()
mad_libs(place = "Massaranduba", adjective = "Pretty", noun = "Home")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t))
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
tr <- "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class)t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
data <- read.csv("/home/joao/Dropbox/Mestrado/Course 2 - R-Programming/code/Activity_week2/specdata/001.csv")
data
head(data)
attr(data)
attributes(data)
prop <- "sulfate"
head(data)
data$prop
data[,prop]
data
head(data)
head(data[,prop])
prop <- "Date"
head(data[,prop])
data
head(data)
head(data$sulfate)
head(data[1])
head(data[,1])
head(data[1,])
head(data[!is.na(data$sulfate),])
length(data[!is.na(data$sulfate) & !is.na(data$nitrate),])
length(data[!is.na(data$sulfate) && !is.na(data$nitrate),])
length(data[!is.na(data$sulfate) | !is.na(data$nitrate),])
length(data[!is.na(data$sulfate),])
data[!is.na(data$sulfate),]
length(data[!is.na(data$sulfate),][1,])
length(data[!is.na(data$sulfate),])
data[!is.na(data$sulfate),]
data[!is.na(data$sulfate) & !is.na(data$nitrate),]
attributes(data[!is.na(data$sulfate) & !is.na(data$nitrate),])
data[!is.na(data$sulfate) & !is.na(data$nitrate),][[1]]
length(data[!is.na(data$sulfate) & !is.na(data$nitrate),][[1]])
t <- table()
t <- new table()
t <- matrix(ncol = 2)
t
attributes(t)
dimnames(t) <- list(,c("id","nobs"))
dimnames(t) <- list(c("id","nobs"))
t
dimnames(t) <- list(c(), c("id","nobs"))
t
t <- matrix(ncol = 2)
t[1] = c(1,1)
t
t[1,] = c(1,1)
t
t[2,] = c(1,1)
t[,2] = c(1,1)
t
?matrix
t <- frame(a = 1, b = 1)
t <- frame(a = c(1), b = c(1))
t <- data.frame(a = 1, b = 1)
t
t[2]
t[2,]
t[2,] <- c(2,2)
t
t[4,] <- c(4,4)
t
t[3,] <- c(4,4)
t
t <- frame()
t
t <- data.frame(row.names = c("a","b"))
t
?data.frame
t <- data.frame(a,b)
t <- data.frame("a","b")
t
t <- data.frame(id = NA, nobs = NA)
t
?cor
m <- matrix(nrow = 5, ncol = 2)
m
m[1,] = c(1.95, 93.1)
m[2,] = c(1.96, 93.9)
m
m[3,] = c(1.95, 89.9)
m[4,] = c(1.98, 95.1)
m
m[5,] = c(2.1, 100.2)
m
cov(m)
m
h <- c(1.95,1.96,1.95,1.98,2.1)
h
w <- c(93.1,93.9,89.9,95.1,100.2)
w
cor(h,w)
cov(h,w)
mean(h)
mean(w)
sd(h)
cov(h,w)
cov(h,w, method = c("pearson"))
cov(h,w, method = c("kendall"))
cov(h,w, method = c("spearman"))
cov(h,w, method = c("pearson"))
cov(w,h, method = c("pearson"))
cor(h,w)
cov(h,w)
data
data$sulfate
data[!is.na(data$sulfate)]
data[!is.na(data$sulfate),]
data[!is.na(data$sulfate) & !is.na(data$nitrate),]
data[!is.na(data$sulfate) & !is.na(data$nitrate),]$sulfate
data[!is.na(data$sulfate) & !is.na(data$nitrate),]$nitrate
length(data[!is.na(data$sulfate) & !is.na(data$nitrate),]$sulfate)
length(data[!is.na(data$sulfate) & !is.na(data$nitrate),]$nitrate)
cleanData <- data[!is.na(data$sulfate) & !is.na(data$nitrate),]
cleanData
thresholdData <- cleanData[cleanData$sulfate > 1 & cleanData$nitrate > 1,]
thresholdData
corData <- vector(length = 0)
corData
corData = numeric()
corData
corData <- vector(length = 0)
corData <- numeric()
corData <- c(corData,1)
corData
corData <- c(corData,2)
corData
x <- c(rnorm(10), runif(10), rnorm(10))
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3,10)
f
f[1]
f$1
tapply(x, f, mean)
split(x,f)
split(x,f, drop = TRUE)
split(x,f, drop = FALSE)
lapply(spline(x,f),mean)
lapply(split(x,f),mean)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapp
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
?table
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(iris)
library(datasets)
data("iris")
?data
data(iris)
?iris
head(iris)
length(iris)
length(iris[1])
length(iris[,1])
iris$Species
tapply(iris$Sepal.Length, iris$Species, mean)
head(iris)
rowMeans(iris[,1:4])
colMeans(iris[,1:4])
apply(iris, 2, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
hpMean <- tapply(mtcars$hp, mtcars$cyl, mean)
diff(hpMean)
diff(hpMean[1], hpMean)
range(hpMean)
range(hpMean)[2] - range(hpMean)[1]
debug(ls)
ls()
setwd("~/repositories/ProgrammingAssignment2")
dir()
ls()
rm(ls())
ls()
